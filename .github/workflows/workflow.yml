# Every workflow starts with a name. The name will be displayed on the Actions page and on any badges.
name: CI workflow

# Adding event triggers
on:
  push:
    branches: [ main ] # You can list branches as elements in an array

  pull_request: 
    branches:
      - main # You can also list branches using a hyphen

# Adding jobs
jobs:
  build:
    runs-on: ubuntu-latest
    container: python:3.9-slim # It is important to consistently use the same version of dependencies and operating system for all phases of development including the CI pipeline.
    steps:
      # Step #1
      - name: Checkout the code # The name of the first step
        uses: actions/checkout@v3 # The action that will be used in the first step (https://github.com/actions/checkout)

      # Step #2
      - name: Install all the dependencies # The name of the second step
        # Leading pipe followed by shell commands
        # The first command installs pip if it is not found on the GitHub runner or updates it to the latest version if it is already installed.
        # The second command instructs pip to install any dependencies listed in the requirements.txt file.
        run: |
          python -m pip install --upgrade pip 
          pip3 install -r requirements.txt

      # Step #3
      - name: Lint with flake8
        # Leading pipe followed by shell commands
        # This command will run flake8 for the service folder of your repository. By adding the following options, you customize the linting process:
        # --count: shows the count of all warnings and errors in the result of the command
        # --select=E9,F63,F7,F82: limits the checks to syntax errors
        # --show-source: adds the actual line number where the error/warning is found
        # --statistics: shows the count of each type of error and warning in the result
        run: |
          flake8 service --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 service --count --max-complexity=10 --max-line-length=127 --statistics

      # Step #4
      - name: Run unit tests with nose
        # When there is only one command, the pipe in not needed
        run: nosetests -v --with-spec --spec-color --with-coverage --cover-package=app 